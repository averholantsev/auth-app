{"version":3,"sources":["containers/AuthForm/AuthFormStyles.tsx","components/AuthComponents/AuthInput.tsx","components/AuthComponents/AuthInputPassword.tsx","components/AuthComponents/AuthButton.tsx","components/AuthComponents/AuthCheckbox.tsx","components/AuthComponents/AuthAlert.tsx","axios-main.tsx","containers/AuthForm/AuthForm.tsx","store/actions.tsx","store/actionTypes.tsx","containers/NextPage.tsx","App.tsx","serviceWorker.ts","store/reducer.tsx","index.tsx"],"names":["Container","styled","div","LockIconContainer","RoundIcon","AuthHeader","h1","LinkContainer","Link","a","LeftLink","RightLink","Copyright","p","useStyles","makeStyles","theme","createStyles","root","margin","width","color","borderColor","input","WebkitBoxShadow","AuthInput","props","classes","TextField","className","variant","inputProps","AuthInputPassword","React","useState","showPassword","state","setState","type","InputProps","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","edge","CSSButton","withStyles","textTransform","backgroundColor","Button","AuthButton","children","CSSFormControlLabel","float","FormControlLabel","CSSCheckbox","checked","Checkbox","AuthCheckbox","control","value","CSSAlert","marginBottom","Alert","AuthAlert","instance","axios","create","baseURL","AuthForm","email","password","rememberMe","validateFields","fieldValidationErrors","willSend","inputHandler","event","name","target","validation","validateFieldsUpdate","test","length","checkboxHandler","checkbox","formSenderHandler","onAuth","emailError","passwordError","this","authRedirect","isAuth","to","resError","severity","errorMessage","key","id","label","error","helperText","onChange","href","Component","connect","jwt","dispatch","dataToServer","post","then","response","data","catch","authFail","status","auth","NextPage","logout","onLogout","App","from","path","exact","component","Boolean","window","location","hostname","match","initialState","authSuccess","action","authLogout","reduser","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75ad8018.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  margin-top: 10%;\r\n  padding: 0 28px;\r\n\r\n  @media (min-width: 390px) {\r\n    width: 380px;\r\n    padding: 0;\r\n    margin-top: 5%;\r\n  }\r\n`;\r\n\r\nexport const LockIconContainer = styled.div`\r\n  position: inherit;\r\n  padding-top: 72px;\r\n  padding-bottom: 15px;\r\n`;\r\n\r\nexport const RoundIcon = styled.div`\r\n  background-color: #e10050;\r\n  border-radius: 100%;\r\n  display: block;\r\n  width: 40px;\r\n  height: 40px;\r\n  margin: 0 auto;\r\n  & svg{\r\n    padding: 8px;\r\n    font-size: 24px;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nexport const AuthHeader = styled.h1`\r\n  padding: 0;\r\n  margin: 0 0 20px 0;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 24px;\r\n  line-height: 18px;\r\n`;\r\n\r\nexport const LinkContainer = styled.div`\r\n  display: block;\r\n`;\r\n\r\nconst Link = styled.a`\r\n  color: #2f80ed;\r\n  font-size: 14px;\r\n  text-decoration: none;\r\n\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nexport const LeftLink = styled(Link)`\r\n  float: left;\r\n`;\r\n\r\nexport const RightLink = styled(Link)`\r\n  float: right;\r\n\r\n  @media (max-width: 389px) {\r\n    width: 125px;\r\n    text-align: right;\r\n  }\r\n`;\r\n\r\nexport const Copyright = styled.p`\r\n  margin-top: 66px;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  letter-spacing: 0.16px;\r\n  color: rgba(0, 0, 0, 0.54);\r\n`;\r\n","import React from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { Theme, makeStyles, createStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: \"10px 0\",\r\n      width: \"100%\",\r\n      \"&:hover label.MuiInputLabel-outlined\": {\r\n        color: \"rgba(0, 0, 0, 0.87)\"\r\n      },\r\n      \"&:hover label.Mui-focused\": {\r\n        color: \"#2196F3\"\r\n      },\r\n      \"& label.Mui-focused\": {\r\n        color: \"#2196F3\"\r\n      },\r\n      \"& .MuiOutlinedInput-root\": {\r\n        \"& fieldset\": {\r\n          borderColor: \"rgba(0, 0, 0, 0.36)\"\r\n        },\r\n        \"&:hover fieldset\": {\r\n          borderColor: \"rgba(0, 0, 0, 0.87)\"\r\n        },\r\n        \"&.Mui-focused fieldset\": {\r\n          borderColor: \"#2196F3\"\r\n        }\r\n      }\r\n    },\r\n    input: {\r\n      \"&:-webkit-autofill\": {\r\n        WebkitBoxShadow: \"0 0 0 30px white inset !important\"\r\n      }\r\n    }\r\n  })\r\n);\r\n\r\nconst AuthInput = (props: any) => {\r\n  const classes = useStyles();\r\n  return <TextField className={classes.root} variant=\"outlined\" inputProps={{className: classes.input}} {...props} />;\r\n};\r\n\r\nexport default AuthInput;\r\n","import React from \"react\";\r\nimport { TextField, InputAdornment, IconButton } from \"@material-ui/core\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: \"10px 0\",\r\n      width: \"100%\",\r\n      \"&:hover label.MuiInputLabel-outlined\": {\r\n        color: \"rgba(0, 0, 0, 0.87)\"\r\n      },\r\n      \"&:hover label.Mui-focused\": {\r\n        color: \"#2196F3\"\r\n      },\r\n      \"& label.Mui-focused\": {\r\n        color: \"#2196F3\"\r\n      },\r\n      \"& .MuiOutlinedInput-root\": {\r\n        \"& fieldset\": {\r\n          borderColor: \"rgba(0, 0, 0, 0.36)\"\r\n        },\r\n        \"&:hover fieldset\": {\r\n          borderColor: \"rgba(0, 0, 0, 0.87)\"\r\n        },\r\n        \"&.Mui-focused fieldset\": {\r\n          borderColor: \"#2196F3\"\r\n        }\r\n      }\r\n    },\r\n    input: {\r\n      \"&:-webkit-autofill\": {\r\n        WebkitBoxShadow: \"0 0 0 30px white inset !important\"\r\n      }\r\n    }\r\n  })\r\n);\r\n\r\ninterface State {\r\n  showPassword: boolean;\r\n}\r\n\r\nconst AuthInputPassword = (props: any) => {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState<State>({\r\n    showPassword: false\r\n  });\r\n\r\n  const handleClickShowPassword = () => {\r\n    setState({ ...state, showPassword: !state.showPassword });\r\n  };\r\n\r\n  return (\r\n    <TextField\r\n      className={classes.root}\r\n      variant=\"outlined\"\r\n      type={state.showPassword ? \"text\" : \"password\"}\r\n      inputProps={{ className: classes.input }}\r\n      InputProps={{\r\n        endAdornment: (\r\n          <InputAdornment position=\"end\">\r\n            <IconButton\r\n              aria-label=\"toggle password visibility\"\r\n              onClick={handleClickShowPassword}\r\n              edge=\"end\"\r\n            >\r\n              {state.showPassword ? <Visibility /> : <VisibilityOff />}\r\n            </IconButton>\r\n          </InputAdornment>\r\n        )\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AuthInputPassword;\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CSSButton = withStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    textTransform: \"none\",\r\n    margin: \"30px 0 10px 0\",\r\n    backgroundColor: \"#2196F3\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#2F80ED\"\r\n    }\r\n  }\r\n})(Button);\r\n\r\nconst AuthButton = (props: any) => {\r\n  return <CSSButton variant=\"contained\" color=\"primary\" {...props}>{props.children}</CSSButton>;\r\n};\r\n\r\nexport default AuthButton;\r\n","import React from \"react\";\r\nimport { FormControlLabel, Checkbox, CheckboxProps } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CSSFormControlLabel = withStyles({\r\n  root: {\r\n    float: \"left\"\r\n  }\r\n})(FormControlLabel);\r\n\r\nconst CSSCheckbox = withStyles({\r\n  root: {\r\n    color: \"rgba(0, 0, 0, 0.54)\",\r\n    \"&$checked\": {\r\n      color: \"#2196F3\"\r\n    }\r\n  },\r\n  checked: {}\r\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\r\n\r\nconst AuthCheckbox = (props: any) => {\r\n  return (\r\n    <CSSFormControlLabel\r\n      control={<CSSCheckbox value=\"rememberMe\" color=\"default\" />}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AuthCheckbox;\r\n","import React from \"react\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CSSAlert = withStyles({\r\n  root: {\r\n    marginBottom: \"10px\"\r\n  }\r\n})(Alert)\r\n\r\nconst AuthAlert = (props: any) => {\r\n  return <CSSAlert {...props}>{props.children}</CSSAlert>;\r\n};\r\n\r\nexport default AuthAlert;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://demo0163282.mockable.io/\"\r\n});\r\n\r\nexport default instance;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nimport {\r\n  Container,\r\n  LockIconContainer,\r\n  RoundIcon,\r\n  AuthHeader,\r\n  LinkContainer,\r\n  LeftLink,\r\n  RightLink,\r\n  Copyright\r\n} from \"./AuthFormStyles\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport AuthInput from \"../../components/AuthComponents/AuthInput\";\r\nimport AuthInputPassword from \"../../components/AuthComponents/AuthInputPassword\";\r\nimport AuthButton from \"../../components/AuthComponents/AuthButton\";\r\nimport AuthCheckbox from \"../../components/AuthComponents/AuthCheckbox\";\r\nimport CSSAlert from \"../../components/AuthComponents/AuthAlert\";\r\nimport { auth } from \"../../store/actions\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n// Типы данных\r\ninterface IProps {\r\n  onAuth: (email: string, password: string, rememberMe: boolean) => void;\r\n  isAuth: boolean;\r\n  resError: boolean;\r\n  errorMessage: string;\r\n  history: any;\r\n}\r\n\r\ntype validateFieldsType = {\r\n  email: boolean;\r\n  password: boolean;\r\n};\r\n\r\ninterface IState {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe?: boolean;\r\n  validateFields?: validateFieldsType;\r\n  fieldValidationErrors?: {\r\n    email: string;\r\n    password: string;\r\n  };\r\n  willSend?: boolean;\r\n  resError?: boolean;\r\n  errorMessage?: string;\r\n}\r\n\r\ntype StateKeys = keyof validateFieldsType;\r\n\r\n// Реализация классового компонента формы\r\nclass AuthForm extends Component<IProps, IState> {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    rememberMe: false,\r\n    validateFields: {\r\n      email: false,\r\n      password: false\r\n    },\r\n    fieldValidationErrors: {\r\n      email: \"Обязательное поле!\",\r\n      password: \"Обязательное поле!\"\r\n    },\r\n    willSend: true\r\n  };\r\n\r\n  //Функция для обновления состояния полей ввода\r\n  inputHandler = (event: any): void => {\r\n    const name: StateKeys = event.target.name;\r\n    const value: string = event.target.value;\r\n    this.validation(name, value);\r\n\r\n    //Обновление State значения почты или пароля\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  //Валидация\r\n  validation = (name: string, value: string): void => {\r\n    const reg = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\r\n    let validateFieldsUpdate = { ...this.state.validateFields };\r\n    let fieldValidationErrors = { ...this.state.fieldValidationErrors };\r\n    switch (name) {\r\n      case \"email\":\r\n        validateFieldsUpdate.email = reg.test(value);\r\n        if (value.length === 0) {\r\n          fieldValidationErrors.email = \"Обязательное поле!\";\r\n        } else fieldValidationErrors.email = \"Проверьте корректность почты\";\r\n        break;\r\n      case \"password\":\r\n        validateFieldsUpdate.password = value.length >= 6;\r\n        if (value.length === 0) {\r\n          fieldValidationErrors.password = \"Обязательное поле!\";\r\n        } else\r\n          fieldValidationErrors.password =\r\n            \"Пароль должен быть более 6 символов\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({\r\n      validateFields: validateFieldsUpdate,\r\n      fieldValidationErrors: fieldValidationErrors\r\n    });\r\n  };\r\n\r\n  //Функция для обновления состояния чекбокса\r\n  checkboxHandler = (): void => {\r\n    let checkbox: boolean = this.state.rememberMe;\r\n\r\n    this.setState({ rememberMe: !checkbox });\r\n  };\r\n\r\n  //Функция для отправки данных формы\r\n  formSenderHandler = (): void => {\r\n    //Проверка на заполненные поля\r\n    if (this.state.validateFields.email && this.state.validateFields.password) {\r\n      this.setState({ willSend: true });\r\n      //Отправка POST запроса на backend\r\n      this.props.onAuth(\r\n        this.state.email,\r\n        this.state.password,\r\n        this.state.rememberMe\r\n      );\r\n    } else {\r\n      this.setState({ willSend: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    //Вспомогательные переменные для отображения валидации и подсказки\r\n    let emailError: boolean = false;\r\n    let passwordError: boolean = false;\r\n\r\n    if (!this.state.willSend) {\r\n      emailError = !this.state.validateFields.email;\r\n      passwordError = !this.state.validateFields.password;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuth) {\r\n      authRedirect = <Redirect to=\"/auth-app/next-page\" />;\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        {authRedirect}\r\n        <Helmet>\r\n          <title>Вход в аккаунт</title>\r\n        </Helmet>\r\n        <form>\r\n          <LockIconContainer>\r\n            <RoundIcon>\r\n              <LockOutlinedIcon />\r\n            </RoundIcon>\r\n          </LockIconContainer>\r\n          <AuthHeader>Вход в аккаунт</AuthHeader>\r\n          {this.props.resError ? (\r\n            <CSSAlert severity=\"error\">{this.props.errorMessage}</CSSAlert>\r\n          ) : null}\r\n          <AuthInput\r\n            key=\"email\"\r\n            id=\"email\"\r\n            label=\"Почта\"\r\n            name=\"email\"\r\n            error={emailError}\r\n            helperText={\r\n              emailError ? this.state.fieldValidationErrors.email : null\r\n            }\r\n            onChange={this.inputHandler}\r\n            value={this.state.email}\r\n          />\r\n          <AuthInputPassword\r\n            key=\"password\"\r\n            id=\"password\"\r\n            label=\"Пароль\"\r\n            name=\"password\"\r\n            error={passwordError}\r\n            helperText={\r\n              passwordError ? this.state.fieldValidationErrors.password : null\r\n            }\r\n            onChange={this.inputHandler}\r\n            value={this.state.password}\r\n          />\r\n          <AuthCheckbox\r\n            id=\"rememberMe\"\r\n            label=\"Запомнить меня\"\r\n            name=\"rememberMe\"\r\n            onChange={this.checkboxHandler}\r\n            checked={this.state.rememberMe}\r\n          />\r\n          <AuthButton onClick={this.formSenderHandler}>\r\n            Войти в аккаунт\r\n          </AuthButton>\r\n          <LinkContainer>\r\n            <LeftLink href=\"/#\">Забыли пароль?</LeftLink>\r\n            <RightLink href=\"/#\">Ещё нет аккаунта? Регистрация</RightLink>\r\n          </LinkContainer>\r\n          <Copyright>Copyright© Ваш сайт 2019.</Copyright>\r\n        </form>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n//Использование Redux\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    isAuth: state.jwt !== null,\r\n    resError: state.resError,\r\n    errorMessage: state.errorMessage\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onAuth: (email: string, password: string, rememberMe: boolean) =>\r\n      dispatch(auth(email, password, rememberMe))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthForm);\r\n","import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"../axios-main\";\r\n\r\nexport const authSuccess = (jwt: string) => {\r\n  return {\r\n    type: actionTypes.AUTH_SUCCESS,\r\n    jwt: jwt\r\n  };\r\n};\r\n\r\nexport const authFail = (error: any) => {\r\n  return {\r\n    type: actionTypes.AUTH_FAIL,\r\n    error: error\r\n  };\r\n};\r\n\r\nexport const auth = (email: string, password: string, rememberMe: boolean) => {\r\n  const dataToServer = {\r\n    email: email,\r\n    password: password,\r\n    rememberMe: rememberMe\r\n  };\r\n\r\n  return (dispatch: any) => {\r\n    axios\r\n      .post(\"/314145ed-4ccd-46fd-a1f9-f5b83468e714\", dataToServer)\r\n      .then(response => {\r\n        dispatch(authSuccess(response.data.jwt));\r\n      })\r\n      .catch(error => {\r\n        dispatch(authFail(error.response.status));\r\n      });\r\n  };\r\n};\r\n\r\nexport const authLogout = () => {\r\n  return {\r\n    type: actionTypes.AUTH_LOGOUT\r\n  };\r\n};\r\n","export const AUTH_SUCCESS = \"AUTH_SUCCESS\";\r\nexport const AUTH_FAIL = \"AUTH_FAIL\";\r\nexport const AUTH_LOGOUT = \"AUTH_LOGOUT\";","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Helmet from \"react-helmet\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { Container } from \"./AuthForm/AuthFormStyles\";\r\nimport CSSAlert from \"../components/AuthComponents/AuthAlert\";\r\nimport AuthButton from \"../components/AuthComponents/AuthButton\";\r\nimport { authLogout } from \"../store/actions\";\r\n\r\ninterface IProps {\r\n  jwt?: string;\r\n  onLogout?: any;\r\n}\r\n\r\nclass NextPage extends Component<IProps> {\r\n  render() {\r\n    let logout: any = null;\r\n    if (!this.props.jwt) {\r\n      logout = <Redirect to=\"/auth-app/\" />;\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        {logout}\r\n        <Helmet>\r\n          <title>Следующая страница</title>\r\n        </Helmet>\r\n        <CSSAlert>\r\n          Авторизация прошла успешна, ваш jwt: {this.props.jwt}\r\n        </CSSAlert>\r\n        <AuthButton onClick={this.props.onLogout}>Выйти</AuthButton>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    jwt: state.jwt\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onLogout: () => dispatch(authLogout())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NextPage);\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport AuthForm from \"./containers/AuthForm/AuthForm\";\r\nimport NextPage from \"./containers/NextPage\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Redirect from=\"/\" to=\"/auth-app/\" />\r\n      <Route path=\"/auth-app/\" exact component={AuthForm} />\r\n      <Route path=\"/auth-app/next-page\" exact component={NextPage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n  jwt: null,\r\n  resError: false,\r\n  errorMessage: null\r\n};\r\n\r\nconst authSuccess = (state: any, action: any) => {\r\n  return {\r\n    ...state,\r\n    jwt: action.jwt,\r\n    resError: false\r\n  };\r\n};\r\n\r\nconst authFail = (state: any, action: any) => {\r\n  let errorMessage: string;\r\n  if (action.error === 401) {\r\n    errorMessage = \"Ошибка авторизации, проверьте данные и повторите попытку\";\r\n  } else {\r\n    errorMessage = \"Произошла ошибка, попробуйте повторите попытку позднее\";\r\n  }\r\n  return {\r\n    ...state,\r\n    resError: true,\r\n    errorMessage: errorMessage\r\n  };\r\n};\r\n\r\nconst authLogout = (state: any) => {\r\n  return {\r\n    ...state,\r\n    jwt: null\r\n  };\r\n};\r\n\r\nconst reduser = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case actionTypes.AUTH_SUCCESS:\r\n      return authSuccess(state, action);\r\n    case actionTypes.AUTH_FAIL:\r\n      return authFail(state, action);\r\n    case actionTypes.AUTH_LOGOUT:\r\n      return authLogout(state);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reduser;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport reducer from \"./store/reducer\";\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}