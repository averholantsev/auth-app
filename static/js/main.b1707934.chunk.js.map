{"version":3,"sources":["axios-main.tsx","components/AuthComponents/AuthInput.tsx","components/AuthComponents/AuthButton.tsx","components/AuthComponents/AuthCheckbox.tsx","components/AuthComponents/AuthAlert.tsx","store/reducer.tsx","containers/AuthForm.tsx","containers/NextPage.tsx","App.tsx","serviceWorker.ts","index.tsx","components/UI/Icons/icon.svg"],"names":["instance","axios","create","baseURL","CSSTextField","withStyles","root","margin","width","color","borderColor","TextField","AuthInput","props","variant","CSSButton","textTransform","backgroundColor","Button","AuthButton","children","CSSFormControlLabel","float","FormControlLabel","CSSCheckbox","checked","Checkbox","AuthCheckbox","control","value","CSSAlert","marginBottom","Alert","AuthAlert","initialState","jwt","reduser","state","action","type","Container","styled","div","LockIconContainer","AuthHeader","h1","CSSTypography","display","textAlign","Typography","CSSLink","fontSize","textDecoration","Link","Copyright","p","AuthForm","email","password","rememberMe","validateFields","fieldValidationErrors","willSend","resError","errorMessage","inputHandler","event","name","target","validateFieldsUpdate","test","length","setState","checkboxHandler","checkbox","formValidate","dataToServer","console","log","post","then","response","data","onAuthAccepted","history","push","catch","error","status","emailError","passwordError","this","className","src","lockIcon","alt","severity","key","id","label","helperText","onChange","onClick","href","Component","connect","dispatch","NextPage","backToAuthPage","goBack","App","from","to","path","exact","component","Boolean","window","location","hostname","match","store","createStore","reducer","applyMiddleware","logger","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b1707934.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://demo0163282.mockable.io/\"\r\n});\r\n\r\nexport default instance;","import React from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CSSTextField = withStyles({\r\n  root: {\r\n    margin: \"10px 0\",\r\n    width: \"100%\",\r\n    \"&:hover label.MuiInputLabel-outlined\": {\r\n      color: \"rgba(0, 0, 0, 0.87)\"\r\n    },\r\n    \"&:hover label.Mui-focused\": {\r\n      color: \"#2196F3\"\r\n    },\r\n    \"& label.Mui-focused\": {\r\n      color: \"#2196F3\"\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        borderColor: \"rgba(0, 0, 0, 0.36)\"\r\n      },\r\n      \"&:hover fieldset\": {\r\n        borderColor: \"rgba(0, 0, 0, 0.87)\"\r\n      },\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: \"#2196F3\"\r\n      }\r\n    }\r\n  }\r\n})(TextField);\r\n\r\nconst AuthInput = (props: any) => {\r\n  return <CSSTextField variant=\"outlined\" {...props} />;\r\n};\r\n\r\nexport default AuthInput;\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CSSButton = withStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    textTransform: \"none\",\r\n    margin: \"30px 0 10px 0\",\r\n    backgroundColor: \"#2196F3\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#2F80ED\"\r\n    }\r\n  }\r\n})(Button);\r\n\r\nconst AuthButton = (props: any) => {\r\n  return <CSSButton variant=\"contained\" color=\"primary\" {...props}>{props.children}</CSSButton>;\r\n};\r\n\r\nexport default AuthButton;\r\n","import React from \"react\";\r\nimport { FormControlLabel, Checkbox, CheckboxProps } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CSSFormControlLabel = withStyles({\r\n  root: {\r\n    float: \"left\"\r\n  }\r\n})(FormControlLabel);\r\n\r\nconst CSSCheckbox = withStyles({\r\n  root: {\r\n    color: \"rgba(0, 0, 0, 0.54)\",\r\n    \"&$checked\": {\r\n      color: \"#2196F3\"\r\n    }\r\n  },\r\n  checked: {}\r\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\r\n\r\nconst AuthCheckbox = (props: any) => {\r\n  return (\r\n    <CSSFormControlLabel\r\n      control={<CSSCheckbox value=\"rememberMe\" color=\"default\" />}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AuthCheckbox;\r\n","import React from \"react\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CSSAlert = withStyles({\r\n  root: {\r\n    marginBottom: \"10px\"\r\n  }\r\n})(Alert)\r\n\r\nconst AuthAlert = (props: any) => {\r\n  return <CSSAlert {...props}>{props.children}</CSSAlert>;\r\n};\r\n\r\nexport default AuthAlert;\r\n","const initialState = {\r\n  jwt: null\r\n};\r\n\r\nexport const JWT_AUTH = \"JWT_AUTH\";\r\n\r\nconst reduser = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case JWT_AUTH:\r\n      return {\r\n        ...state,\r\n        jwt: action.jwt\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reduser;","import React, { Component } from \"react\";\r\nimport { Typography, Link } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"../axios-main\";\r\n\r\nimport lockIcon from \"../components/UI/Icons/icon.svg\";\r\nimport AuthInput from \"../components/AuthComponents/AuthInput\";\r\nimport AuthButton from \"../components/AuthComponents/AuthButton\";\r\nimport AuthCheckbox from \"../components/AuthComponents/AuthCheckbox\";\r\nimport CSSAlert from \"../components/AuthComponents/AuthAlert\";\r\nimport { JWT_AUTH } from \"../store/reducer\";\r\n\r\n// Стили\r\nconst Container = styled.div`\r\n  display: flex;\r\n  margin: 0 auto;\r\n  margin-top: 10%;\r\n  padding: 0 28px;\r\n\r\n  @media (min-width: 390px) {\r\n    width: 380px;\r\n    padding: 0;\r\n    margin-top: 5%;\r\n  }\r\n`;\r\n\r\nconst LockIconContainer = styled.div`\r\n  position: inherit;\r\n  padding-top: 72px;\r\n  padding-bottom: 15px;\r\n\r\n  .roundIcon {\r\n    background-color: #e10050;\r\n    border-radius: 100%;\r\n    display: block;\r\n    width: 40px;\r\n    height: 40px;\r\n    margin: 0 auto;\r\n  }\r\n`;\r\n\r\nconst AuthHeader = styled.h1`\r\n  padding: 0;\r\n  margin: 0 0 20px 0;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 24px;\r\n  line-height: 18px;\r\n`;\r\n\r\nconst CSSTypography = withStyles({\r\n  root: {\r\n    display: \"block\",\r\n    \"& .remember\": {\r\n      float: \"left\"\r\n    },\r\n    \"& .register\": {\r\n      float: \"right\",\r\n      \"@media (max-width: 389px)\": {\r\n        width: \"125px\",\r\n        textAlign: \"right\"\r\n      }\r\n    }\r\n  }\r\n})(Typography);\r\n\r\nconst CSSLink = withStyles({\r\n  root: {\r\n    color: \"#2F80ED\",\r\n    fontSize: \"14px\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\"\r\n    }\r\n  }\r\n})(Link);\r\n\r\nconst Copyright = styled.p`\r\n  margin-top: 66px;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n  letter-spacing: 0.16px;\r\n  color: rgba(0, 0, 0, 0.54);\r\n\r\n  @media (max-width: 375px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\n// Типы данных\r\ninterface IProps {\r\n  onAuthAccepted: (id: string) => void;\r\n  history: any;\r\n}\r\n\r\ntype validateFieldsType = {\r\n  email: boolean;\r\n  password: boolean;\r\n};\r\n\r\ninterface IState {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe?: boolean;\r\n  validateFields?: validateFieldsType;\r\n  fieldValidationErrors?: {\r\n    email: string;\r\n    password: string;\r\n  };\r\n  willSend?: boolean;\r\n  resError?: boolean;\r\n  errorMessage?: string;\r\n}\r\n\r\ntype StateKeys = keyof validateFieldsType;\r\n\r\n// Реализация классового компонента формы\r\nclass AuthForm extends Component<IProps, IState> {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    rememberMe: false,\r\n    validateFields: {\r\n      email: false,\r\n      password: false\r\n    },\r\n    fieldValidationErrors: {\r\n      email: \"Обязательное поле!\",\r\n      password: \"Обязательное поле!\"\r\n    },\r\n    willSend: true,\r\n    resError: false,\r\n    errorMessage: \"\"\r\n  };\r\n\r\n  //Функция для обновления состояния полей ввода\r\n  inputHandler = (event: any) => {\r\n    const name: StateKeys = event.target.name;\r\n    const value: string = event.target.value;\r\n    const reg = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\r\n\r\n    //Валидация\r\n    let validateFieldsUpdate = { ...this.state.validateFields };\r\n    let fieldValidationErrors = { ...this.state.fieldValidationErrors };\r\n    switch (name) {\r\n      case \"email\":\r\n        validateFieldsUpdate.email = reg.test(value);\r\n        if (value.length === 0) {\r\n          fieldValidationErrors.email = \"Обязательное поле!\";\r\n        } else fieldValidationErrors.email = \"Проверьте корректность почты\";\r\n        break;\r\n      case \"password\":\r\n        validateFieldsUpdate.password = value.length >= 6;\r\n        if (value.length === 0) {\r\n          fieldValidationErrors.password = \"Обязательное поле!\";\r\n        } else\r\n          fieldValidationErrors.password =\r\n            \"Пароль должен быть более 6 символов\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({\r\n      validateFields: validateFieldsUpdate,\r\n      fieldValidationErrors: fieldValidationErrors\r\n    });\r\n\r\n    //Обновление State значения почты или пароля\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  //Функция для обновления состояния чекбокса\r\n  checkboxHandler = () => {\r\n    let checkbox: boolean = this.state.rememberMe;\r\n\r\n    this.setState({ rememberMe: !checkbox });\r\n  };\r\n\r\n  //Проверка валидности формы\r\n  formValidate = () => {\r\n    const dataToServer = {\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      rememberMe: this.state.rememberMe\r\n    };\r\n\r\n    if (this.state.validateFields.email && this.state.validateFields.password) {\r\n      this.setState({ willSend: true });\r\n      console.log(\"Отправляем на сервер данные\");\r\n      axios\r\n        .post(\"/314145ed-4ccd-46fd-a1f9-f5b83468e714\", dataToServer)\r\n        .then(response => {\r\n          console.log(response.data);\r\n          this.props.onAuthAccepted(response.data.jwt);\r\n          this.props.history.push(\"/auth-app/next-page\");\r\n        })\r\n        .catch(error => {\r\n          if (error.response.status === 401) {\r\n            this.setState({\r\n              resError: true,\r\n              errorMessage:\r\n                \"Ошибка авторизации, проверьте данные и повторите попытку\"\r\n            });\r\n          } else\r\n            this.setState({\r\n              resError: true,\r\n              errorMessage:\r\n                \"Произошла ошибка, попробуйте повторите попытку позднее\"\r\n            });\r\n        });\r\n    } else {\r\n      this.setState({ willSend: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    //Вспомогательные переменные для отображения валидации и подсказки\r\n    let emailError: boolean = false;\r\n    let passwordError: boolean = false;\r\n\r\n    if (!this.state.willSend) {\r\n      emailError = !this.state.validateFields.email;\r\n      passwordError = !this.state.validateFields.password;\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        <form>\r\n          <LockIconContainer>\r\n            <div className=\"roundIcon\">\r\n              <img src={lockIcon} alt=\"auth-lock\" />\r\n            </div>\r\n          </LockIconContainer>\r\n          <AuthHeader>Вход в аккаунт</AuthHeader>\r\n          {this.state.resError ? (\r\n            <CSSAlert severity=\"error\">{this.state.errorMessage}</CSSAlert>\r\n          ) : null}\r\n          <AuthInput\r\n            key=\"email\"\r\n            id=\"email\"\r\n            label=\"Почта*\"\r\n            name=\"email\"\r\n            error={emailError}\r\n            helperText={\r\n              emailError ? this.state.fieldValidationErrors.email : null\r\n            }\r\n            onChange={this.inputHandler}\r\n            value={this.state.email}\r\n          />\r\n          <AuthInput\r\n            key=\"password\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Пароль*\"\r\n            name=\"password\"\r\n            error={passwordError}\r\n            helperText={\r\n              passwordError ? this.state.fieldValidationErrors.password : null\r\n            }\r\n            onChange={this.inputHandler}\r\n            value={this.state.password}\r\n          />\r\n          <AuthCheckbox\r\n            id=\"rememberMe\"\r\n            label=\"Запомнить меня\"\r\n            name=\"rememberMe\"\r\n            onChange={this.checkboxHandler}\r\n            checked={this.state.rememberMe}\r\n          />\r\n          <AuthButton onClick={this.formValidate}>Войти в аккаунт</AuthButton>\r\n          <CSSTypography>\r\n            <CSSLink key=\"remember\" className=\"remember\" href=\"/#\">\r\n              Забыли пароль?\r\n            </CSSLink>\r\n            <CSSLink key=\"register\" className=\"register\" href=\"/#\">\r\n              Ещё нет аккаунта? Регистрация\r\n            </CSSLink>\r\n          </CSSTypography>\r\n          <Copyright>Copyright© Ваш сайт 2019.</Copyright>\r\n        </form>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    onAuthAccepted: (id: string) => dispatch({ type: JWT_AUTH, jwt: id })\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AuthForm);\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CSSAlert from \"../components/AuthComponents/AuthAlert\";\r\nimport AuthButton from \"../components/AuthComponents/AuthButton\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 auto;\r\n  margin-top: 10%;\r\n  padding: 0 28px;\r\n\r\n  @media (min-width: 390px) {\r\n    width: 380px;\r\n    padding: 0;\r\n    margin-top: 5%;\r\n  }\r\n`;\r\n\r\ninterface IProps {\r\n  jwt?: string;\r\n  history?: any;\r\n}\r\n\r\nclass NextPage extends Component<IProps> {\r\n  backToAuthPage = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <CSSAlert>\r\n          Авторизация прошла успешна, ваш jwt: {this.props.jwt}\r\n        </CSSAlert>\r\n        <AuthButton onClick={this.backToAuthPage}>Назад</AuthButton>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    jwt: state.jwt\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(NextPage);\r\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport \"./App.css\";\nimport AuthForm from \"./containers/AuthForm\";\nimport NextPage from \"./containers/NextPage\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Redirect from=\"/\" to=\"/auth-app/\" />\n      <Route path=\"/auth-app/\" exact component={AuthForm} />\n      <Route path=\"/auth-app/next-page\" exact component={NextPage} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer from \"./store/reducer\";\n\nconst store = createStore(reducer, applyMiddleware(logger));\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icon.9ffdbb2e.svg\";"],"sourceRoot":""}