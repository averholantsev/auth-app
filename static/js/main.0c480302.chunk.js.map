{"version":3,"sources":["axios-main.tsx","components/AuthComponents/AuthInput.tsx","components/AuthComponents/AuthButton.tsx","components/AuthComponents/AuthCheckbox.tsx","components/AuthComponents/AuthAlert.tsx","store/reducer.tsx","containers/AuthForm.tsx","containers/NextPage.tsx","App.tsx","serviceWorker.ts","index.tsx","components/UI/Icons/icon.svg"],"names":["instance","axios","create","baseURL","CSSTextField","withStyles","root","margin","width","color","borderColor","TextField","AuthInput","props","variant","CSSButton","textTransform","backgroundColor","Button","AuthButton","children","CSSFormControlLabel","float","FormControlLabel","CSSCheckbox","checked","Checkbox","AuthCheckbox","control","value","CSSAlert","marginBottom","Alert","AuthAlert","initialState","jwt","reduser","state","action","type","Container","styled","div","LockIconContainer","AuthHeader","h1","CSSTypography","display","textAlign","Typography","CSSLink","fontSize","textDecoration","Link","Copyright","p","AuthForm","email","password","rememberMe","validateFields","fieldValidationErrors","willSend","resError","errorMessage","inputHandler","event","name","target","validateFieldsUpdate","test","length","setState","checkboxHandler","checkbox","formValidate","dataToServer","post","then","response","onAuthAccepted","data","history","push","catch","error","status","emailError","passwordError","this","className","src","lockIcon","alt","severity","key","id","label","helperText","onChange","onClick","href","Component","connect","dispatch","NextPage","backToAuthPage","goBack","App","from","to","path","exact","component","Boolean","window","location","hostname","match","store","createStore","reducer","applyMiddleware","logger","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0c480302.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://demo0163282.mockable.io/\"\n});\n\nexport default instance;","import React from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst CSSTextField = withStyles({\n  root: {\n    margin: \"10px 0\",\n    width: \"100%\",\n    \"&:hover label.MuiInputLabel-outlined\": {\n      color: \"rgba(0, 0, 0, 0.87)\"\n    },\n    \"&:hover label.Mui-focused\": {\n      color: \"#2196F3\"\n    },\n    \"& label.Mui-focused\": {\n      color: \"#2196F3\"\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"rgba(0, 0, 0, 0.36)\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"rgba(0, 0, 0, 0.87)\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"#2196F3\"\n      }\n    }\n  }\n})(TextField);\n\nconst AuthInput = (props: any) => {\n  return <CSSTextField variant=\"outlined\" {...props} />;\n};\n\nexport default AuthInput;\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst CSSButton = withStyles({\n  root: {\n    width: \"100%\",\n    textTransform: \"none\",\n    margin: \"30px 0 10px 0\",\n    backgroundColor: \"#2196F3\",\n    \"&:hover\": {\n      backgroundColor: \"#2F80ED\"\n    }\n  }\n})(Button);\n\nconst AuthButton = (props: any) => {\n  return <CSSButton variant=\"contained\" color=\"primary\" {...props}>{props.children}</CSSButton>;\n};\n\nexport default AuthButton;\n","import React from \"react\";\nimport { FormControlLabel, Checkbox, CheckboxProps } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst CSSFormControlLabel = withStyles({\n  root: {\n    float: \"left\"\n  }\n})(FormControlLabel);\n\nconst CSSCheckbox = withStyles({\n  root: {\n    color: \"rgba(0, 0, 0, 0.54)\",\n    \"&$checked\": {\n      color: \"#2196F3\"\n    }\n  },\n  checked: {}\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\n\nconst AuthCheckbox = (props: any) => {\n  return (\n    <CSSFormControlLabel\n      control={<CSSCheckbox value=\"rememberMe\" color=\"default\" />}\n      {...props}\n    />\n  );\n};\n\nexport default AuthCheckbox;\n","import React from \"react\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst CSSAlert = withStyles({\n  root: {\n    marginBottom: \"10px\"\n  }\n})(Alert)\n\nconst AuthAlert = (props: any) => {\n  return <CSSAlert {...props}>{props.children}</CSSAlert>;\n};\n\nexport default AuthAlert;\n","const initialState = {\n  jwt: null\n};\n\nexport const JWT_AUTH = \"JWT_AUTH\";\n\nconst reduser = (state = initialState, action: any) => {\n  switch (action.type) {\n    case JWT_AUTH:\n      return {\n        ...state,\n        jwt: action.jwt\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reduser;","import React, { Component } from \"react\";\nimport { Typography, Link } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport axios from \"../axios-main\";\n\nimport lockIcon from \"../components/UI/Icons/icon.svg\";\nimport AuthInput from \"../components/AuthComponents/AuthInput\";\nimport AuthButton from \"../components/AuthComponents/AuthButton\";\nimport AuthCheckbox from \"../components/AuthComponents/AuthCheckbox\";\nimport CSSAlert from \"../components/AuthComponents/AuthAlert\";\nimport { JWT_AUTH } from \"../store/reducer\";\n\n// Стили\nconst Container = styled.div`\n  display: flex;\n  margin: 0 auto;\n  margin-top: 10%;\n  padding: 0 28px;\n\n  @media (min-width: 390px) {\n    width: 380px;\n    padding: 0;\n    margin-top: 5%;\n  }\n`;\n\nconst LockIconContainer = styled.div`\n  position: inherit;\n  padding-top: 72px;\n  padding-bottom: 15px;\n\n  .roundIcon {\n    background-color: #e10050;\n    border-radius: 100%;\n    display: block;\n    width: 40px;\n    height: 40px;\n    margin: 0 auto;\n  }\n`;\n\nconst AuthHeader = styled.h1`\n  padding: 0;\n  margin: 0 0 20px 0;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 24px;\n  line-height: 18px;\n`;\n\nconst CSSTypography = withStyles({\n  root: {\n    display: \"block\",\n    \"& .remember\": {\n      float: \"left\"\n    },\n    \"& .register\": {\n      float: \"right\",\n      \"@media (max-width: 389px)\": {\n        width: \"125px\",\n        textAlign: \"right\"\n      }\n    }\n  }\n})(Typography);\n\nconst CSSLink = withStyles({\n  root: {\n    color: \"#2F80ED\",\n    fontSize: \"14px\",\n    \"&:hover\": {\n      textDecoration: \"underline\"\n    }\n  }\n})(Link);\n\nconst Copyright = styled.p`\n  margin-top: 66px;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 14px;\n  line-height: 18px;\n  letter-spacing: 0.16px;\n  color: rgba(0, 0, 0, 0.54);\n`;\n\n// Типы данных\ninterface IProps {\n  onAuthAccepted: (id: string) => void;\n  history: any;\n}\n\ntype validateFieldsType = {\n  email: boolean;\n  password: boolean;\n};\n\ninterface IState {\n  email?: string;\n  password?: string;\n  rememberMe?: boolean;\n  validateFields?: validateFieldsType;\n  fieldValidationErrors?: {\n    email: string;\n    password: string;\n  };\n  willSend?: boolean;\n  resError?: boolean;\n  errorMessage?: string;\n}\n\ntype StateKeys = keyof validateFieldsType;\n\n// Реализация классового компонента формы\nclass AuthForm extends Component<IProps, IState> {\n  state = {\n    email: \"\",\n    password: \"\",\n    rememberMe: false,\n    validateFields: {\n      email: false,\n      password: false\n    },\n    fieldValidationErrors: {\n      email: \"Обязательное поле!\",\n      password: \"Обязательное поле!\"\n    },\n    willSend: true,\n    resError: false,\n    errorMessage: \"\"\n  };\n\n  //Функция для обновления состояния полей ввода\n  inputHandler = (event: any) => {\n    const name: StateKeys = event.target.name;\n    const value: string = event.target.value;\n    const reg = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\n\n    //Валидация\n    let validateFieldsUpdate = { ...this.state.validateFields };\n    let fieldValidationErrors = { ...this.state.fieldValidationErrors };\n    switch (name) {\n      case \"email\":\n        validateFieldsUpdate.email = reg.test(value);\n        if (value.length === 0) {\n          fieldValidationErrors.email = \"Обязательное поле!\";\n        } else fieldValidationErrors.email = \"Проверьте корректность почты\";\n        break;\n      case \"password\":\n        validateFieldsUpdate.password = value.length >= 6;\n        if (value.length === 0) {\n          fieldValidationErrors.password = \"Обязательное поле!\";\n        } else\n          fieldValidationErrors.password =\n            \"Пароль должен быть более 6 символов\";\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      validateFields: validateFieldsUpdate,\n      fieldValidationErrors: fieldValidationErrors\n    });\n\n    //Обновление State значения почты или пароля\n    this.setState({ [name]: value });\n  };\n\n  //Функция для обновления состояния чекбокса\n  checkboxHandler = () => {\n    let checkbox: boolean = this.state.rememberMe;\n\n    this.setState({ rememberMe: !checkbox });\n  };\n\n  //Проверка валидности формы\n  formValidate = () => {\n    const dataToServer = {\n      email: this.state.email,\n      password: this.state.password,\n      rememberMe: this.state.rememberMe\n    };\n\n    if (this.state.validateFields.email && this.state.validateFields.password) {\n      this.setState({ willSend: true });\n      axios\n        .post(\"/314145ed-4ccd-46fd-a1f9-f5b83468e714\", dataToServer)\n        .then(response => {\n          this.props.onAuthAccepted(response.data.jwt);\n          this.props.history.push(\"/auth-app/next-page\");\n        })\n        .catch(error => {\n          if (error.response.status === 401) {\n            this.setState({\n              resError: true,\n              errorMessage:\n                \"Ошибка авторизации, проверьте данные и повторите попытку\"\n            });\n          } else\n            this.setState({\n              resError: true,\n              errorMessage:\n                \"Произошла ошибка, попробуйте повторите попытку позднее\"\n            });\n        });\n    } else {\n      this.setState({ willSend: false });\n    }\n  };\n\n  render() {\n    //Вспомогательные переменные для отображения валидации и подсказки\n    let emailError: boolean = false;\n    let passwordError: boolean = false;\n\n    if (!this.state.willSend) {\n      emailError = !this.state.validateFields.email;\n      passwordError = !this.state.validateFields.password;\n    }\n\n    return (\n      <Container>\n        <form>\n          <LockIconContainer>\n            <div className=\"roundIcon\">\n              <img src={lockIcon} alt=\"auth-lock\" />\n            </div>\n          </LockIconContainer>\n          <AuthHeader>Вход в аккаунт</AuthHeader>\n          {this.state.resError ? (\n            <CSSAlert severity=\"error\">{this.state.errorMessage}</CSSAlert>\n          ) : null}\n          <AuthInput\n            key=\"email\"\n            id=\"email\"\n            label=\"Почта\"\n            name=\"email\"\n            error={emailError}\n            helperText={\n              emailError ? this.state.fieldValidationErrors.email : null\n            }\n            onChange={this.inputHandler}\n            value={this.state.email}\n          />\n          <AuthInput\n            key=\"password\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Пароль\"\n            name=\"password\"\n            error={passwordError}\n            helperText={\n              passwordError ? this.state.fieldValidationErrors.password : null\n            }\n            onChange={this.inputHandler}\n            value={this.state.password}\n          />\n          <AuthCheckbox\n            id=\"rememberMe\"\n            label=\"Запомнить меня\"\n            name=\"rememberMe\"\n            onChange={this.checkboxHandler}\n            checked={this.state.rememberMe}\n          />\n          <AuthButton onClick={this.formValidate}>Войти в аккаунт</AuthButton>\n          <CSSTypography>\n            <CSSLink key=\"remember\" className=\"remember\" href=\"/#\">\n              Забыли пароль?\n            </CSSLink>\n            <CSSLink key=\"register\" className=\"register\" href=\"/#\">\n              Ещё нет аккаунта? Регистрация\n            </CSSLink>\n          </CSSTypography>\n          <Copyright>Copyright© Ваш сайт 2019.</Copyright>\n        </form>\n      </Container>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAuthAccepted: (id: string) => dispatch({ type: JWT_AUTH, jwt: id })\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(AuthForm);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\n\nimport CSSAlert from \"../components/AuthComponents/AuthAlert\";\nimport AuthButton from \"../components/AuthComponents/AuthButton\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  margin-top: 10%;\n  padding: 0 28px;\n\n  @media (min-width: 390px) {\n    width: 380px;\n    padding: 0;\n    margin-top: 5%;\n  }\n`;\n\ninterface IProps {\n  jwt?: string;\n  history?: any;\n}\n\nclass NextPage extends Component<IProps> {\n  backToAuthPage = () => {\n    this.props.history.goBack();\n  };\n\n  render() {\n    return (\n      <Container>\n        <CSSAlert>\n          Авторизация прошла успешна, ваш jwt: {this.props.jwt}\n        </CSSAlert>\n        <AuthButton onClick={this.backToAuthPage}>Назад</AuthButton>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    jwt: state.jwt\n  };\n};\n\nexport default connect(mapStateToProps)(NextPage);\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport \"./App.css\";\nimport AuthForm from \"./containers/AuthForm\";\nimport NextPage from \"./containers/NextPage\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Redirect from=\"/\" to=\"/auth-app/\" />\n      <Route path=\"/auth-app/\" exact component={AuthForm} />\n      <Route path=\"/auth-app/next-page\" exact component={NextPage} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer from \"./store/reducer\";\n\nconst store = createStore(reducer, applyMiddleware(logger));\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icon.9ffdbb2e.svg\";"],"sourceRoot":""}